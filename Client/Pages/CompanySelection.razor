@page "/Company"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Lists
@inject ILocalStorageService LocalStorage
@inject HttpClient client
@inject NavigationManager nav
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.SplitButtons
<AuthorizeView>
    <Authorized>
        <div class="row text-center align-items-center mb-2">

            <h3>Company Selection</h3>
            <div class="col">
                @if (CurrentAccount?.Role == "Admin")
                {
                    <SfButton CssClass="bg-success" OnClick="@onUploadclick" IconCss="syncfusion-blazor-icons syncfusion-blazor-icon-fileupload"></SfButton>
                    <SfButton CssClass="bg-success" IconCss="e-icons e-user">Users</SfButton>
                }
                <SfButton CssClass="bg-success" OnClick="@AddNewCompany" IconCss="e-icons e-plus">Add</SfButton>
            </div>
        </div>

        @if (CompAccount is not null)
        {
            <SfListView DataSource="@CompAccount" CssClass="mx-auto"
                    ShowHeader="false">
                <ListViewFieldSettings TValue="CompaniesListDTO" GroupBy="@nameof(CompaniesListDTO.Role)" Id="@nameof(CompaniesListDTO.ID)"></ListViewFieldSettings>
                <ListViewTemplates TValue="CompaniesListDTO">
                    <GroupTemplate Context="listItem">
                        <h5 class="text-center">
                            @(listItem.Text=="Admin"?"Your Companies":"Companies")
                        </h5>
                    </GroupTemplate>
                    <Template Context="listItem">
                        @{
                        <div class="d-flex text-center" @onclick="@(async ()=>await onClick(listItem.ID))">
                            <span class="badge rounded-pill"><i style="font-size:12px;color:@(listItem.IsSelected?"green":"red")" class="oi oi-@(listItem.IsSelected?"check":"x")"></i></span>
                            @(listItem.AccountNo)@(listItem.Role=="Admin"?"":" - ")@(listItem.Name)
                        </div>
                    }
                </Template>

            </ListViewTemplates>
        </SfListView>
        }
        else
        {
            <h3 class="text-center">Loading, Please wait...</h3>
        }
        <SfDialog Width="335px" IsModal="true" @bind-Visible="@Visibility">
            <DialogTemplates>
                <Header> Error </Header>
                <Content>
                    <p>There was an error in changing selected company</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" OnClick="@DlgButtonClick" />
            </DialogButtons>
            <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
        </SfDialog>

        <SfDialog Width="335px" IsModal="true" @bind-Visible="@UploadDialogVisible">
            <DialogTemplates>
                <Header> Upload Database </Header>
                <Content>
                    <SfUploader AllowedExtensions=".txt">
                        <UploaderEvents FileSelected="onFileSelect">
                        </UploaderEvents>
                        <UploaderAsyncSettings SaveUrl="api/Account/fileupload"></UploaderAsyncSettings>
                    </SfUploader>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" IsPrimary="true" OnClick="@DlgButtonUploadClick" />
            </DialogButtons>
            <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
        </SfDialog>
        <SfDialog Width="335px" IsModal="true" @bind-Visible="@AddDialogVisible">
            <DialogTemplates>
                <Header> Add new company </Header>
                <Content>
                    ---form---
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" IsPrimary="true" OnClick="@DlgButtonAddClick" />
            </DialogButtons>
            <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
        </SfDialog>
    </Authorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    Task<AuthenticationState> authState { get; set; }

    List<CompaniesListDTO>? CompAccount { get; set; }
    CompaniesListDTO? CurrentAccount { get; set; }
    private bool Visibility { get; set; } = false;
    private bool UploadDialogVisible { get; set; }
    private bool AddDialogVisible { get; set; }

    private string currID;
    async Task onClick(string ID)
    {
        var result = await client.GetFromJsonAsync<bool>("/api/Account/ChangeSelectedCompany?ID=" + ID);
        if (result)
        {
            CompAccount = await client.GetFromJsonAsync<List<CompaniesListDTO>?>("/api/Account/GetAllCompaniesForUser");
            CurrentAccount = CompAccount.FirstOrDefault(x => x.IsSelected);
            if (string.IsNullOrWhiteSpace(CurrentAccount?.ID))
            {
                CurrentAccount = null;
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Visibility = true;
        }
    }
    private async void onFileSelect(SelectedEventArgs args)
    {
        args.CurrentRequest = new List<object> { new { ID = currID } };
    }

    private void onUploadclick(MouseEventArgs args)
    {
        UploadDialogVisible = true;
    }
    private void DlgButtonUploadClick(MouseEventArgs args)
    {
        UploadDialogVisible = false;
    }
    private void DlgButtonClick()
    {
        Visibility = false;
    }
    private async Task DlgButtonAddClick(MouseEventArgs args)
    {
        var res = await client.GetFromJsonAsync<bool>("/api/Account/CreateCompany?name=xxac&phone=03415551092&address=ExampleAddressCode");
        AddDialogVisible = false;
    }
    private void AddNewCompany(MouseEventArgs args)
    {
        AddDialogVisible = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var st = (await authState).User.Claims;
        currID = st.FirstOrDefault(x => x.Type == "sub").Value;
        CompAccount = await client.GetFromJsonAsync<List<CompaniesListDTO>?>("/api/Account/GetAllCompaniesForUser");
        CurrentAccount = CompAccount.FirstOrDefault(x => x.IsSelected);
        if (string.IsNullOrWhiteSpace(CurrentAccount?.ID))
        {
            CurrentAccount = null;
        }
        await InvokeAsync(StateHasChanged);
    }
}
