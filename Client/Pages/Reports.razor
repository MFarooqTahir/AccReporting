@page "/Reports"
@using AccReporting.Shared.DTOs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject IJSRuntime JS
<div class="d-block align-content-center w-100">
    <h3 class="text-center">Reports</h3>
    <SfTab HeaderPlacement="HeaderPosition.Top" LoadOn="ContentLoad.Dynamic" OverflowMode="@OverflowMode.Scrollable">
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Sales Report"></TabHeader> @*Replace your required header1 text here *@
                </ChildContent>
                <ContentTemplate>
                    <SfGrid @ref="@DataGrid" TValue="InvSummGridModel" ID="Grid" DataSource="@SalesReportList" AllowPaging="true" AllowFiltering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="@(new List<string>() {"ExcelExport","PdfExport","CsvExport", "Search"})">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                        <GridPageSettings PageSizes="true"></GridPageSettings>
                        <GridEvents OnToolbarClick="@GridToolbarClick" TValue="InvSummGridModel"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(InvSummGridModel.InvNo) HeaderText="InvNo" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(InvSummGridModel.Type) HeaderText="Type" AllowEditing="false" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(InvSummGridModel.Amount) HeaderText="Amount" AllowEditing="false" Width="150"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </ContentTemplate>
            </TabItem>
            <TabItem Content="Place here your content">
                @*Replace your required tab1 boby content here *@
                <ChildContent>
                    <TabHeader Text="Header1"></TabHeader> @*Replace your required header1 text here *@
                </ChildContent>
            </TabItem>
            <TabItem Content="Place here your content ">
                @*Replace your required tab2 boby content here *@
                <ChildContent>
                    <TabHeader Text="Header2"></TabHeader> @*Replace your required header2 text here *@
                </ChildContent>
            </TabItem>
        </TabItems>
    </SfTab>
    @*<div class="row row-cols-1 row-cols-md-3 g-4">
    <div class="col">
    <SfCard>
    <CardHeader>Sales Report</CardHeader>
    <CardContent>

    <EditForm Model="@model" OnValidSubmit="@onvalid">
    <DataAnnotationsValidator />
    <div class="form-group">
    <label for="InvNo">Inv No:</label>
    <SfNumericTextBox ShowSpinButton="false" Format="" ID="InvNo" Placeholder="Invoice Number" @bind-Value="model.InvNo"></SfNumericTextBox>
    <ValidationMessage For="@(() => model.InvNo)"></ValidationMessage>
    </div>
    <div class="form-group">
    <div class="form-group">
    <label for="country">Type:</label>
    <SfComboBox ID="country" Placeholder="Type of invoice" @bind-Value="@model.Type" DataSource="@types">
    </SfComboBox>
    <ValidationMessage For="@(() => model.Type)"></ValidationMessage>
    </div>
    </div>
    <SfButton class="mt-3 bg-success"><span class="mb-1">View PDF</span></SfButton>
    </EditForm>


    </CardContent>
    </SfCard>
    </div>

    </div>*@
</div>
@code {
    IEnumerable<InvSummGridModel> SalesReportList;
    SfGrid<InvSummGridModel> DataGrid { get; set; }
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "//IDValue###_excelexport")
        {
            this.DataGrid.ExcelExport();
        }
        if (args.Item.Id == "//IDValue###_pdfexport")
        {
            this.DataGrid.PdfExport();
        }
        if (args.Item.Id == "//IDValue###_csvexport")
        {
            this.DataGrid.CsvExport();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ClickedSalesReport();
    }
    private async Task ClickedSalesReport()
    {
        SalesReportList = await Http.GetFromJsonAsync<IEnumerable<InvSummGridModel>>("api/Report/InvSummaryList").ConfigureAwait(false);
    }
    private SalesReportInput model { get; set; } = new();
    public List<string> types = new List<string>
    {
       "Sale","Estimate","Purchase","Return",
    };
    private async Task onvalid(EditContext context)
    {
        var modelInp = context.Model as SalesReportInput;
        await JS.InvokeVoidAsync("open", $"Reports/SalesReport?invNo={model.InvNo}&type={model.Type}", "_blank");
    }
}
