@page "/SalesReport"
@inject IJSRuntime JS
@inject HttpClient Http
<AuthorizeView>
    <Authorized>

        <h3 class="text-center">SalesReport</h3>
        @if (SalesReportList is not null)
        {
            <SfGrid @ref="@defaultGrid" TValue="InvSummGridModel" ID="Grid" DataSource="@SalesReportList" AllowPaging="true" AllowSelection="true" AllowFiltering="true" AllowResizing="true" AllowGrouping="true" AllowPdfExport="true" AllowSorting="true" Toolbar="@(new List<string>() {"Search"})">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                <GridEvents OnToolbarClick="@GridToolbarClick" TValue="InvSummGridModel"></GridEvents>
                <GridSelectionSettings CheckboxMode="CheckboxSelectionType.Default" Mode="SelectionMode.Row" CheckboxOnly="true"></GridSelectionSettings>
                <GridColumns>
                    <GridColumn Type="ColumnType.None" HeaderText="Report Pdf" AllowFiltering="false" AllowSorting="false" Width="30">
                        <Template Context="ctx">
                            @{
                                var curr = ctx as InvSummGridModel;
                                <a class="btn bg-transparent" href=@($"Reports/SalesReport?invNo={curr.InvNo}&type={curr.Type}") target="_blank"><Syncfusion.Blazor.Buttons.SfIcon IconCss="color:white" Size="Syncfusion.Blazor.Buttons.IconSize.Large" Name="Syncfusion.Blazor.Buttons.IconName.ExportPdf"></Syncfusion.Blazor.Buttons.SfIcon></a>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(InvSummGridModel.InvNo) HeaderText="InvNo" AllowEditing="false" IsPrimaryKey="true" Width="80">
                    </GridColumn>
                    <GridColumn Field=@nameof(InvSummGridModel.Type) HeaderText="Type" AllowEditing="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(InvSummGridModel.Amount) HeaderText="Amount" AllowEditing="false" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>

        }
        else
        {
            <SfSpinner Label="Loading..." Visible="true"></SfSpinner>
        }

    </Authorized>
</AuthorizeView>
@code {


    IEnumerable<InvSummGridModel> SalesReportList;
    public SfGrid<InvSummGridModel> defaultGrid = new();
    public int pageNo { get; set; }
    public int totalPages { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;
    public bool DisableFirstIcon = false;
    public bool DisableLastIcon = false;
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "//IDValue###_excelexport")
        {
            this.defaultGrid.ExcelExport();
        }
        if (args.Item.Id == "//IDValue###_pdfexport")
        {
            this.defaultGrid.PdfExport();
        }
        if (args.Item.Id == "//IDValue###_csvexport")
        {
            this.defaultGrid.CsvExport();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ClickedSalesReport();
    }
    private async Task ClickedSalesReport()
    {
        //var response = await Http.GetAsync("/Reports/InvSummaryListPaged?page=0&pageSize=25");
        //var str = await response.Content.ReadAsStringAsync();
        SalesReportList = await Http.GetFromJsonAsync<IEnumerable<InvSummGridModel>>($"/Reports/InvSummaryList").ConfigureAwait(false);
        StateHasChanged();
    }
    private SalesReportInput model { get; set; } = new();
    public List<string> types = new List<string>
    {
       "Sale","Estimate","Purchase","Return",
    };
    private async Task<Object> onvalid()
    {
        await JS.InvokeVoidAsync("open", $"Reports/SalesReport?invNo={model.InvNo}&type={model.Type}", "_blank");
        return null;
    }
}

