@page "/SalesReport"
@inject IJSRuntime JS
@inject HttpClient Http
<div class="d-block align-content-center w-100">
    <h3 class="text-center">SalesReport</h3>
    @if(SalesReportList is not null){
    <SfGrid @ref="@DataGrid" TValue="InvSummGridModel" ID="Grid" DataSource="@SalesReportList" AllowPaging="true" AllowFiltering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" Toolbar="@(new List<string>() {"ExcelExport","PdfExport","CsvExport", "Search"})">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
        <GridEvents OnToolbarClick="@GridToolbarClick" TValue="InvSummGridModel"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(InvSummGridModel.invNo) HeaderText="InvNo" AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
            <GridColumn Field=@nameof(InvSummGridModel.Type) HeaderText="Type" AllowEditing="false" Width="150"></GridColumn>
            <GridColumn Field=@nameof(InvSummGridModel.Amount) HeaderText="Amount" AllowEditing="false" Width="150"></GridColumn>
        </GridColumns>
    </SfGrid>
    }
    else{
    <SfSpinner Label="Loading..." Visible="true"></SfSpinner>        
    }
</div>

@code {
    IEnumerable<InvSummGridModel> SalesReportList;
    SfGrid<InvSummGridModel> DataGrid { get; set; }
    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "//IDValue###_excelexport")
        {
            this.DataGrid.ExcelExport();
        }
        if (args.Item.Id == "//IDValue###_pdfexport")
        {
            this.DataGrid.PdfExport();
        }
        if (args.Item.Id == "//IDValue###_csvexport")
        {
            this.DataGrid.CsvExport();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ClickedSalesReport();
    }
    private async Task ClickedSalesReport()
    {
        //var response = await Http.GetAsync("/Reports/InvSummaryListPaged?page=0&pageSize=25");
        //var str = await response.Content.ReadAsStringAsync();
        SalesReportList = await Http.GetFromJsonAsync<IEnumerable<InvSummGridModel>>("/Reports/InvSummaryListPaged?page=0&pageSize=25").ConfigureAwait(false);
        StateHasChanged();
    }
    private SalesReportInput model { get; set; } = new();
    public List<string> types = new List<string>
    {
       "Sale","Estimate","Purchase","Return",
    };
    private async Task onvalid(EditContext context)
    {
        var modelInp = context.Model as SalesReportInput;
        await JS.InvokeVoidAsync("open", $"Reports/SalesReport?invNo={model.InvNo}&type={model.Type}", "_blank");
    }
}

