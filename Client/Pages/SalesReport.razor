@page "/SalesReport"
@using System.Globalization
@using Syncfusion.Blazor.Buttons
@inject IJSRuntime JS
@inject HttpClient Http
<AuthorizeView>
    <Authorized>
        <style>
             .e-export-pdf:before{
            content: '\e700';
            color: gray;
            font-size:28px;
        }
        </style>
        <SfSpinner Label="" Visible="@(SalesReportList is null)"></SfSpinner>

        <h3 class="text-center">Sales Report</h3>
        <SfGrid RowRenderingMode="RowDirection.Vertical" @ref="@defaultGrid" TValue="InvSummGridModel" AllowTextWrap="true" ID="Grid" DataSource="@SalesReportList" AllowPaging="true" AllowSelection="true" AllowFiltering="true" AllowResizing="true" AllowGrouping="true" AllowPdfExport="true" AllowSorting="true">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
            <GridEvents CommandClicked="OnCommandClicked" TValue="InvSummGridModel"></GridEvents>
            <GridPageSettings PageSize="8"></GridPageSettings>
            <GridSelectionSettings CheckboxMode="CheckboxSelectionType.Default" Mode="SelectionMode.Row" CheckboxOnly="true"></GridSelectionSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.None" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Center" AllowSearching="false" AllowFiltering="false" AllowSorting="false" Width="45">
                    <GridCommandColumns>
                            
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-export-pdf bg-transparent border-0 w-100 h-100"})" Title="View Pdf"></GridCommandColumn>
                            @*<a class="btn bg-transparent" href=@($"Reports/SalesReport?invNo={s}&type={st}") target="_blank"><Syncfusion.Blazor.Buttons.SfIcon IconCss="color:white" Size="Syncfusion.Blazor.Buttons.IconSize.Large" Name="Syncfusion.Blazor.Buttons.IconName.ExportPdf"></Syncfusion.Blazor.Buttons.SfIcon></a>*@
                        </GridCommandColumns>
                        
                </GridColumn>
                <GridColumn Field=@nameof(InvSummGridModel.InvNo) HeaderText="InvNo" AllowEditing="false" IsPrimaryKey="true" Width="80">
                </GridColumn>
                <GridColumn Field=@nameof(InvSummGridModel.Type) HeaderText="Type" AllowEditing="false" Width="130" MinWidth="100">
                    <Template Context="ctx">
                        @{
                            var curr = ctx as InvSummGridModel;
                                                <span>@(typesAll[curr.Type])</span>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Discount %" Width="95" AllowEditing="false">
                    <Template Context="ctx">
                        @{
                            var curr = ctx as InvSummGridModel;
                                                <span>@($"{(1-(curr.NetAmount/curr.Amount))*100:F2} %")</span>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(InvSummGridModel.Amount) HeaderText="Amount" Format="C2" Width="180" AllowEditing="false" MinWidth="120">

                </GridColumn>
                <GridColumn Field=@nameof(InvSummGridModel.NetAmount) HeaderText="After Discount" Format="C2" Width="180" AllowEditing="false" MinWidth="120">

                </GridColumn>
            </GridColumns>
        </SfGrid>

    </Authorized>
</AuthorizeView>
@code {
    IEnumerable<InvSummGridModel> SalesReportList;
    public SfGrid<InvSummGridModel> defaultGrid = new();
    public int pageNo { get; set; }
    public int totalPages { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;
    public bool DisableFirstIcon = false;
    public bool DisableLastIcon = false;
    public async Task OnCommandClicked(CommandClickEventArgs<InvSummGridModel> args)
    {
        var curr = args.RowData;
                            var st = typesAll[curr.Type];
                            var s = curr.InvNo.ToString();
        
        await JS.InvokeVoidAsync("open", $"Reports/SalesReport?invNo={s}&type={st}", "_blank");
    
    }

    protected override async Task OnInitializedAsync()
    {
        await ClickedSalesReport();
    }
    private async Task ClickedSalesReport()
    {
        //var response = await Http.GetAsync("/Reports/InvSummaryListPaged?page=0&pageSize=25");
        //var str = await response.Content.ReadAsStringAsync();
        SalesReportList = await Http.GetFromJsonAsync<IEnumerable<InvSummGridModel>>($"/Reports/InvSummaryList").ConfigureAwait(false);
        StateHasChanged();
    }
    private SalesReportInput model { get; set; } = new();
    public List<string> types = new List<string>
    {
       "Sale","Estimate","Purchase","Return",
    };
    private async Task OnGetReportClick(string invNo, string Type)
    {
        await JS.InvokeVoidAsync("open", $"Reports/SalesReport?invNo={invNo}&type={Type}", "_blank");
    }
    private readonly IDictionary<string, string> typesAll = new Dictionary<string, string>()
                {
                    {"S","Sale" },{"E","Estimate" },{"P","Purchase" },{"R","Return"}
                };
}

