@page "/login"
@using AccReporting.Client.Services
<h3 class="text-center">Login</h3>
<style>
    .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>

@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<div style="max-width:650px;" class="mx-auto">

<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row mb-3">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="_userForAuthentication.Email" />
            <ValidationMessage For="@(() => _userForAuthentication.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
                <InputText type="@TxtType" id="password" class="form-control" @bind-Value="_userForAuthentication.Password" />
        </div>
    </div>
        <Syncfusion.Blazor.Buttons.SfCheckBox @bind-Checked="@_showPass" @onchange="@((e)=>ShowPassword())" CssClass="my-3 row"> Show Password</Syncfusion.Blazor.Buttons.SfCheckBox>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>
</div>
@code {
    private readonly UserForAuthenticationDto _userForAuthentication = new();
    [Inject]
    public IAuthenticationService AuthenticationService { get; set; } = null!;
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    public bool ShowAuthError { get; set; }
    bool _showPass;
    public string Error { get; set; } = "";
    public string TxtType = "password"; 
 
    public void ShowPassword() 
    { 
        if(this.TxtType== "password") 
        { 
            this.TxtType = "text"; 
        } 
        else 
        { 
            this.TxtType = "password"; 
        } 
    } 
    public async Task ExecuteLogin()
    {
        ShowAuthError = false;
        var result = await AuthenticationService.Login(userForAuthentication: _userForAuthentication);
        if (!result.IsAuthSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else
        {
            NavigationManager.NavigateTo(uri: "/");
        }
    }
}