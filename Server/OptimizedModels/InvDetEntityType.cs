// <auto-generated />
using System;
using System.Reflection;
using AccReporting.Shared.ContextModels;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace AccReporting.Server.OptimizedModels
{
    internal partial class InvDetEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "AccReporting.Shared.ContextModels.InvDet",
                typeof(InvDet),
                baseEntityType);

            var idpr = runtimeEntityType.AddProperty(
                "Idpr",
                typeof(int),
                propertyInfo: typeof(InvDet).GetProperty("Idpr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Idpr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            idpr.AddAnnotation("Relational:ColumnName", "IDPr");

            var amount = runtimeEntityType.AddProperty(
                "Amount",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Amount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Amount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cateCode = runtimeEntityType.AddProperty(
                "CateCode",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("CateCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<CateCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4);

            var dper = runtimeEntityType.AddProperty(
                "Dper",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Dper", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Dper>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var file = runtimeEntityType.AddProperty(
                "File",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("File", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<File>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            file.AddAnnotation("Relational:ColumnName", "FILE");

            var icode = runtimeEntityType.AddProperty(
                "Icode",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Icode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Icode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            icode.AddAnnotation("Relational:ColumnName", "ICode");

            var iname = runtimeEntityType.AddProperty(
                "Iname",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Iname", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Iname>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            iname.AddAnnotation("Relational:ColumnName", "IName");

            var invDate = runtimeEntityType.AddProperty(
                "InvDate",
                typeof(DateTime?),
                propertyInfo: typeof(InvDet).GetProperty("InvDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<InvDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            invDate.AddAnnotation("Relational:ColumnType", "datetime");

            var invNo = runtimeEntityType.AddProperty(
                "InvNo",
                typeof(int?),
                propertyInfo: typeof(InvDet).GetProperty("InvNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<InvNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var netAmount = runtimeEntityType.AddProperty(
                "NetAmount",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("NetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<NetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var pName = runtimeEntityType.AddProperty(
                "PName",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("PName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<PName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            pName.AddAnnotation("Relational:ColumnName", "pName");

            var packing = runtimeEntityType.AddProperty(
                "Packing",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Packing", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Packing>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var pcode = runtimeEntityType.AddProperty(
                "Pcode",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Pcode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Pcode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            pcode.AddAnnotation("Relational:ColumnName", "PCode");

            var pressure = runtimeEntityType.AddProperty(
                "Pressure",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Pressure", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Pressure>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);

            var qty = runtimeEntityType.AddProperty(
                "Qty",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Qty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Qty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var qty2 = runtimeEntityType.AddProperty(
                "Qty2",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Qty2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Qty2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var rate = runtimeEntityType.AddProperty(
                "Rate",
                typeof(double?),
                propertyInfo: typeof(InvDet).GetProperty("Rate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Rate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var regionCode = runtimeEntityType.AddProperty(
                "RegionCode",
                typeof(int?),
                propertyInfo: typeof(InvDet).GetProperty("RegionCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<RegionCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var regionName = runtimeEntityType.AddProperty(
                "RegionName",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("RegionName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<RegionName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);

            var size = runtimeEntityType.AddProperty(
                "Size",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Size", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Size>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 15);

            var sp = runtimeEntityType.AddProperty(
                "Sp",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Sp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Sp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1);
            sp.AddAnnotation("Relational:ColumnName", "SP");

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4);

            var unit = runtimeEntityType.AddProperty(
                "Unit",
                typeof(string),
                propertyInfo: typeof(InvDet).GetProperty("Unit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvDet).GetField("<Unit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 5);

            var key = runtimeEntityType.AddKey(
                new[] { idpr });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__InvDet__B87C5B5F67F5802F");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "InvDet");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
