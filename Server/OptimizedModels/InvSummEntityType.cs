// <auto-generated />
using System;
using System.Reflection;
using AccReporting.Shared.ContextModels;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace AccReporting.Server.OptimizedModels
{
    internal partial class InvSummEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "AccReporting.Shared.ContextModels.InvSumm",
                typeof(InvSumm),
                baseEntityType);

            var idpr = runtimeEntityType.AddProperty(
                "Idpr",
                typeof(int),
                propertyInfo: typeof(InvSumm).GetProperty("Idpr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Idpr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            idpr.AddAnnotation("Relational:ColumnName", "IDPr");

            var addLess = runtimeEntityType.AddProperty(
                "AddLess",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("AddLess", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<AddLess>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var built = runtimeEntityType.AddProperty(
                "Built",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("Built", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Built>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var cartage = runtimeEntityType.AddProperty(
                "Cartage",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("Cartage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Cartage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cartage.AddAnnotation("Relational:ColumnName", "cartage");

            var crDays = runtimeEntityType.AddProperty(
                "CrDays",
                typeof(int?),
                propertyInfo: typeof(InvSumm).GetProperty("CrDays", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<CrDays>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var delivery = runtimeEntityType.AddProperty(
                "Delivery",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Delivery", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Delivery>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);

            var dis = runtimeEntityType.AddProperty(
                "Dis",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("Dis", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Dis>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var disPer = runtimeEntityType.AddProperty(
                "DisPer",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("DisPer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<DisPer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var dueDate = runtimeEntityType.AddProperty(
                "DueDate",
                typeof(DateTime?),
                propertyInfo: typeof(InvSumm).GetProperty("DueDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<DueDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dueDate.AddAnnotation("Relational:ColumnType", "datetime");

            var hcode = runtimeEntityType.AddProperty(
                "Hcode",
                typeof(int?),
                propertyInfo: typeof(InvSumm).GetProperty("Hcode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Hcode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            hcode.AddAnnotation("Relational:ColumnName", "HCode");

            var invDate = runtimeEntityType.AddProperty(
                "InvDate",
                typeof(DateTime?),
                propertyInfo: typeof(InvSumm).GetProperty("InvDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<InvDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            invDate.AddAnnotation("Relational:ColumnType", "datetime");

            var invNo = runtimeEntityType.AddProperty(
                "InvNo",
                typeof(int?),
                propertyInfo: typeof(InvSumm).GetProperty("InvNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<InvNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var note = runtimeEntityType.AddProperty(
                "Note",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Note", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Note>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);

            var orderNo = runtimeEntityType.AddProperty(
                "OrderNo",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("OrderNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<OrderNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);

            var payment = runtimeEntityType.AddProperty(
                "Payment",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Payment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Payment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);

            var pcode = runtimeEntityType.AddProperty(
                "Pcode",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Pcode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Pcode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 30);
            pcode.AddAnnotation("Relational:ColumnName", "PCode");

            var pname = runtimeEntityType.AddProperty(
                "Pname",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Pname", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Pname>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            pname.AddAnnotation("Relational:ColumnName", "PName");

            var refNo = runtimeEntityType.AddProperty(
                "RefNo",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("RefNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<RefNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 35);

            var remarks = runtimeEntityType.AddProperty(
                "Remarks",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Remarks", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Remarks>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);

            var ser = runtimeEntityType.AddProperty(
                "Ser",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("Ser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Ser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var totBill = runtimeEntityType.AddProperty(
                "TotBill",
                typeof(double?),
                propertyInfo: typeof(InvSumm).GetProperty("TotBill", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<TotBill>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(string),
                propertyInfo: typeof(InvSumm).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InvSumm).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4);

            var key = runtimeEntityType.AddKey(
                new[] { idpr });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__InvSumm__B87C5B5F9C9191C6");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "InvSumm");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
